---
title: "2. Los Contenedores üì¶"
lang: es
format: 
  html:
    page-navigation: true
    code-fold: true
---


Probablemente hayas o√≠do en alg√∫n momento hablar de Docker (no nos referimos a la marca de ropa), lanzado en 2013 por la empresa del mismo nombre, r√°pidamente se ha convertido en una de las tecnolog√≠as m√°s populares en la inform√°tica. **Los contenedores no surgen con Docker**, sino que mucho antes con tecnolog√≠as que permiten la virtualizaci√≥n a nivel de sistema operativo como Linux Containers, LXC.

### ¬øQu√© son los contenedores?

**Los contenedores son como peque√±as c√°psulas** dise√±adas para que las **aplicaciones puedan ejecutarse de manera predecible y repetible, sin importar el entorno en el que se encuentren**. Tal como un traje espacial protege a un astronauta üë©‚ÄçüöÄ para que pueda sobrevivir en cualquier planeta sin necesidad de recrear toda la atm√≥sfera de la Tierra üåé, un contenedor **encapsula una aplicaci√≥n junto con todas sus dependencias (bibliotecas, configuraciones y archivos necesarios) en un entorno aislado**. 

Esto **garantiza que la aplicaci√≥n funcione de la misma forma en el entorno de desarrollo, pruebas o producci√≥n**.

**A diferencia de las m√°quinas virtuales**, que requieren un sistema operativo completo para cada instancia, **los contenedores utilizan tecnolog√≠as de virtualizaci√≥n m√°s ligeras** que funcionan a nivel del sistema operativo. Esto significa que todos los **contenedores comparten el mismo n√∫cleo del sistema operativo** subyacente, el mismo kernel, **pero cada uno tiene su propio sistema de archivos, librer√≠as y configuraciones**, lo que los hace independientes entre s√≠.

**¬øPor qu√© esto es importante?** 

Porque los contenedores no solo hacen que las aplicaciones sean **f√°ciles de mover entre diferentes entornos**, sino que **tambi√©n optimizan el uso de recursos del sistema, permitiendo que m√∫ltiples contenedores se ejecuten en el mismo servidor de manera eficiente**. Adem√°s, su p**ortabilidad y escalabilidad hacen que sean ideales para manejar cargas de trabajo variables**, garantizando que tus aplicaciones est√©n listas para enfrentar cualquier desaf√≠o.

## Diferencias clave: contenedores vs m√°quinas virtuales

![Imagen M√°quinas Virtuales vs Contenedores](./assets/images/vm_containers.webp)

Cuando hablamos de contenedores y m√°quinas virtuales, nos referimos a dos tecnolog√≠as de virtualizaci√≥n que permiten ejecutar m√∫ltiples aplicaciones en un mismo servidor f√≠sico. Sin embargo, sus diferencias son fundamentales y radican en c√≥mo manejan la virtualizaci√≥n, el uso de recursos y su arquitectura.


Entonces veamos ahora algunas diferencias entre estas tecnolog√≠as

### Virtualizaci√≥n y Arquitectura

* Como ya vimos, las m√°quinas virtuales (VMs) emulan un hardware completo, incluido un sistema operativo (guest). Esto significa que cada VM act√∫a como si fuera un computador completo y separado, gestionado por el hipervisor, que coordina los recursos del servidor f√≠sico (host).
* Por otro lado, los contenedores virtualizan el sistema operativo en lugar del hardware. En lugar de duplicar sistemas operativos completos, comparten el n√∫cleo del sistema operativo subyacente y a√≠slan cada aplicaci√≥n en su propio entorno. Esto los hace m√°s ligeros y r√°pidos que las m√°quinas virtuales.

### Tecnolog√≠a principal

* Las VMs dependen de hipervisores, que gestionan el acceso entre el sistema operativo invitado y el sistema operativo host. Este enfoque es robusto, pero introduce una mayor sobrecarga en t√©rminos de rendimiento y uso de recursos.
* Los contenedores, en cambio, utilizan un motor de contenedores o un run-time (como Docker). Este software act√∫a como intermediario, proporcionando y gestionando los recursos necesarios para que las aplicaciones funcionen de manera eficiente.

### Tama√±o y uso de recursos

* Las m√°quinas virtuales suelen ser pesadas: sus archivos de imagen ocupan varios gigabytes, ya que incluyen un sistema operativo completo. Esto las hace ideales para escenarios donde se requiere emular hardware completo o ejecutar sistemas heterog√©neos.
* Los contenedores, por su parte, son mucho m√°s ligeros, con tama√±os en el rango de megabytes, ya que solo contienen los archivos y configuraciones necesarios para ejecutar una aplicaci√≥n espec√≠fica. Esto permite ejecutar muchos m√°s contenedores en el mismo hardware en comparaci√≥n con VMs.

### Ventajas en el mundo real

* Las m√°quinas virtuales ofrecen un aislamiento total, siendo ideales para ejecutar aplicaciones que requieren un entorno completamente independiente o para replicar infraestructuras complejas (servidores, redes, bases de datos).
* Los contenedores son perfectos para aplicaciones modernas que necesitan rapidez, escalabilidad y eficiencia, ya que inician en segundos y aprovechan mejor los recursos del hardware.

### Casos en los que los contenedores son √∫tiles


Los contenedores tienen una amplia gama de aplicaciones. Entre los usos m√°s frecuentes se encuentran:

* Creaci√≥n y pruebas de software
* Despliegue de arquitecturas basadas en microservicios
* Implementaci√≥n de soluciones en entornos de nube
* Procesos de Integraci√≥n y Despliegue Continuo (CI/CD)
* Separaci√≥n de entornos para aplicaciones
* Mejora en la escalabilidad y disponibilidad del sistema
* Desarrollo compatible con m√∫ltiples plataformas

En resumen, las VMs son como construir casas completas en un terreno, con sus propias bases, paredes y techos (sistemas operativos completos), mientras que los contenedores son como departamentos en un edificio que comparten la misma estructura (el n√∫cleo del sistema operativo) pero con espacios completamente independientes. La elecci√≥n entre ambas tecnolog√≠as depender√° de las necesidades de tu proyecto.

<a href="01-virtualizacion.qmd" class="btn btn-primary">Anterior</a>
<a href="03-instalacion.qmd" class="btn btn-primary">Siguiente</a>