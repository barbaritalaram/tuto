---
title: "5. Los Conceptos B√°sicos de los Contenedores üëÄ"
lang: es
format: 
  html:
    page-navigation: true
    code-fold: true
---

## Conceptos b√°sicos de Docker

Para entender c√≥mo funciona Docker y aprovechar sus capacidades, es importante familiarizarse con algunos conceptos clave. A continuaci√≥n, explicaremos los elementos esenciales que componen esta tecnolog√≠a.

### Contenedor

Un contenedor es una instancia en ejecuci√≥n de una imagen. Es como una c√°psula autosuficiente dise√±ada para ejecutar una aplicaci√≥n de manera predecible y uniforme, sin importar el entorno donde se encuentre. Siguiendo con la analog√≠a del traje espacial üë©‚ÄçüöÄ, el contenedor encapsula la aplicaci√≥n junto con todas sus dependencias en un entorno aislado.

En t√©rminos t√©cnicos, un contenedor es un proceso que se ejecuta en este entorno aislado. Los contenedores tienen un comando principal que los controla, definido mediante las instrucciones CMD o ENTRYPOINT en el Dockerfile. Esto significa que un contenedor puede:

* Ejecutar una tarea espec√≠fica y finalizar, como procesar un archivo o ejecutar un script.
* Mantenerse en ejecuci√≥n indefinidamente, por ejemplo, para ejecutar un servidor web.

Es importante destacar que los contenedores no son permanentes. Si un contenedor se elimina, **la imagen de la cual fue creado permanece intacta**, lo que permite iniciar otro contenedor id√©ntico en cualquier momento.

### Imagen
Una imagen es como el plano o la receta de un contenedor. Es un archivo inmutable que contiene todo lo necesario para ejecutar una aplicaci√≥n: desde el sistema de archivos hasta las configuraciones necesarias.

Las im√°genes se crean a partir de un **Dockerfile**, que act√∫a como una plantilla para construirlas. Este archivo define:

* La aplicaci√≥n que se desea ejecutar.
* Las librer√≠as del lenguaje necesarias para su funcionamiento (como Python, Node.js o Java).
* Las librer√≠as del sistema operativo requeridas.
* Configuraciones espec√≠ficas, como los comandos de arranque (CMD o ENTRYPOINT), puertos que se deben exponer y directorios de trabajo.

Una vez construida la imagen, esta puede ser reutilizada para crear m√∫ltiples contenedores, lo que garantiza consistencia en los entornos de desarrollo, pruebas y producci√≥n.


### Dockerfile

El ```Dockerfile``` es un archivo que act√∫a como una receta para construir im√°genes en Docker. Contiene un conjunto de instrucciones secuenciales que le indican a Docker c√≥mo preparar un entorno, desde instalar dependencias hasta copiar archivos o configurar variables de entorno.

Es una herramienta poderosa porque permite codificar todo el proceso de configuraci√≥n del entorno como texto, asegurando que pueda ser replicado f√°cilmente en cualquier momento y en cualquier lugar.

**Estructura b√°sica de un Dockerfile**

Los **Dockerfile** suelen comenzar con una instrucci√≥n ```FROM```, que define la imagen base que se utilizar√°. A partir de ah√≠, se agregan las instrucciones necesarias para personalizar esa imagen base seg√∫n las necesidades de la aplicaci√≥n. Entre las instrucciones m√°s comunes se encuentran:

* ```RUN```: Ejecuta comandos para instalar dependencias o realizar configuraciones.
* ```COPY``` o ```ADD```: Copian archivos desde el host al contenedor.
* ```ENV```: Define variables de entorno.
* ```CMD``` o ```ENTRYPOINT```: Especifican el comando que se ejecutar√° al iniciar el contenedor.

**Ejemplo pr√°ctico**

Supongamos que queremos construir una imagen que sirva una p√°gina web con un servidor Apache. Este ser√≠a el Dockerfile correspondiente:

```dockerfile
# Usamos Ubuntu 22.04 como base
FROM ubuntu:22.04  

# Actualizamos paquetes e instalamos Apache
RUN apt-get update && apt-get install -y apache2  

# Copiamos el archivo de nuestra web est√°tica al directorio de Apache
COPY index.html /var/www/html/  

# Arrancamos el servidor Apache en primer plano
CMD ["apache2ctl", "-D", "FOREGROUND"]
```

**Desglose del ejemplo**

1. ```FROM ubuntu:22.04```
Define que la imagen base ser√° Ubuntu 22.04. Esta es la base sobre la que construiremos todo lo dem√°s.


2. ```RUN apt-get update && apt-get install -y apache2```
Actualizamos los paquetes de la distribuci√≥n e instalamos Apache con sus dependencias. Este comando equivale a escribir estas instrucciones en un terminal de Ubuntu.


3. ```COPY index.html /var/www/html/```
 Copiamos un archivo local llamado index.html al directorio donde Apache sirve los archivos web.


4. ```CMD ["apache2ctl", "-D", "FOREGROUND"]```
 Definimos el comando que se ejecutar√° cuando el contenedor arranque: iniciar el servidor Apache en modo primer plano (FOREGROUND).


**Ventajas del Dockerfile**

* Replicabilidad: Todo el proceso est√° codificado, lo que asegura que cualquiera pueda generar la misma imagen siguiendo el mismo Dockerfile.
* Portabilidad: Puedes construir la misma imagen en cualquier sistema que soporte Docker.
* Automatizaci√≥n: Permite automatizar la configuraci√≥n de entornos, reduciendo errores humanos.

En resumen, un Dockerfile es como escribir los pasos que seguir√≠amos manualmente en un sistema operativo, pero los documentamos como c√≥digo para que puedan ser ejecutados autom√°ticamente por Docker. Esto no solo facilita el trabajo en equipo, sino que tambi√©n garantiza entornos consistentes. üöÄ

### Docker Hub

**Docker Hub** es como el **mercado central de Docker**, donde se almacenan y comparten im√°genes de contenedores. Es un repositorio en l√≠nea donde puedes encontrar im√°genes oficiales creadas por empresas como Python, Nginx o PostgreSQL, adem√°s de im√°genes comunitarias para m√∫ltiples prop√≥sitos.
Si necesitas una base para tus proyectos, como un contenedor con Node.js o una base de datos MySQL, Docker Hub ser√° tu mejor aliado. Tambi√©n puedes subir tus propias im√°genes para compartirlas con tu equipo o con la comunidad. Solo necesitas una cuenta para empezar a usar este recurso.


Ahora que conoces qu√© son los contenedores, im√°genes, Dockerfile y Docker Hub, puedes entender c√≥mo estos elementos trabajan juntos para construir entornos de desarrollo eficientes, portables y escalables. üöÄ

<a href="04-primer-container.qmd" class="btn btn-primary">Anterior</a>
<a href="06-excalidraw.qmd" class="btn btn-primary">Siguiente</a>