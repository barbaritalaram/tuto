{"title":"8. Docker Compose 🐙","markdown":{"yaml":{"title":"8. Docker Compose 🐙","lang":"es","format":{"html":{"page-navigation":true,"code-fold":true}}},"headingText":"**¿Qué es docker compose y para qué sirve?**","containsRefs":false,"markdown":"\n\n\nDocker Compose es una herramienta que nos permite definir y manejar múltiples contenedores Docker como una única aplicación. En lugar de correr cada contenedor manualmente con comandos largos, puedes configurar todos tus servicios (contenedores) en un solo archivo YAML (`docker-compose.yml`) y ejecutarlos juntos con un solo comando.\n\n---\n\n### **Beneficios de Usar Docker Compose**\n\n1. **Simplicidad y organización:**\n   - Todos los servicios están definidos en un único archivo.\n   - Fácil de leer y entender, especialmente en proyectos con varios contenedores.\n\n2. **Automatización:**\n   - Puedes iniciar, detener y reiniciar todos los servicios con un solo comando.\n   - Define relaciones entre los servicios, como cuál debe iniciarse primero.\n\n3. **Consistencia:**\n   - Todos los miembros del equipo utilizan la misma configuración.\n   - No necesitas recordar largos comandos `docker run`.\n\n4. **Compartir recursos:**\n   - Los contenedores pueden compartir volúmenes y redes, facilitando la comunicación y el intercambio de datos.\n\n---\n\n### **¿Por qué usar docker compose con nuestras apps?**\n\nEn nuestro caso, tenemos dos aplicaciones, `app1` y `app2`, que trabajan juntas:\n\n1. **`app1`:**\n   - Genera bromas de Chuck Norris usando una API y las guarda en un archivo `jokes.txt`.\n   - Este archivo se guarda en un volumen compartido (`data`).\n\n2. **`app2`:**\n   - Lee las bromas de `jokes.txt` y las combina con imágenes de personajes de Rick and Morty.\n   - Muestra todo esto en un sitio web estilo Bootstrap.\n\nDocker Compose simplifica la forma en que estas dos aplicaciones trabajan juntas. Veamos por qué:\n\n---\n\n### Creando el docker-compose\n\nEn el mismo directorio docker-tutorial que utilizamos la lección anterior, debes crear el archivo llamada `docker-compose.yml`\nAsegurate que quede en el mismo nivel que están `app1`, `app2`, y `data`\n\n```bash\ndocker-tutorial/\n├── app1/               \n│   ├── app.py\n│   ├── requirements.txt\n│   ├── Dockerfile\n|── data/\n├── app2/               \n│   ├── app.py\n│   ├── requirements.txt\n│   ├── Dockerfile\n│   ├── static/\n│       ├── style.css\n├── docker-compose.yml\n```\n\n### Configurando el docker-compose\n\nAbre con el editor el archivo `docker-compose.yml`, copia la configuración que está a continuación y pegala en el archivo:\n\n```yml\nservices:\n  app1:\n    image: chuck_norris_generator\n    build:\n      context: ./app1\n    environment:\n      - API_URL=https://api.chucknorris.io/jokes/random\n    volumes:\n      - ./data:/app/data  # Monta la carpeta 'data' del host en '/app/data' en el contenedor\n    restart: always\n\n  app2:\n    image: chuck_norris_web\n    build:\n      context: ./app2\n    environment:\n      - API_URL=https://rickandmortyapi.com/api/character\n    ports:\n      - \"8081:5000\"\n    volumes:\n      - ./data:/app/data  # Monta la carpeta 'data' del host en '/app/data' en el contenedor\n    depends_on:\n      - app1  # Asegura que 'app1' se inicie antes de 'app2'\n    restart: always\n```\n\n### Corramos junto a docker-compose\n\nAbre una terminal y dirigete a docker-tutorial, y ejecuta el comando `docker-compose up --build`\n\n```bash\ncd docker-turorial\ndocker-compose up --build\n```\n\nSi toda va bien deberías ver como se están iniciando los contenedores con las dos apps.\n\n![compose](./assets/images/compose.png)\n\nSi abres docker desktop deberías tener un contenedor llamado `docker-tutorial`y si le das click deberías ver la orquestación de los dos contenedores\n\n![desktop](./assets/images/desktop.png)\n\nAhora si ingresas al localhost:8081 en tu navegador deberías ver la app funcionando.\n\n![navegador compose](./assets/images/navegador%20compose.png)\n\n### **Beneficios específicos para este proyecto**\n\n1. **Orquestación de `app1` y `app2`:**\n   - Con `depends_on`, nos aseguramos de que `app1` (el generador de bromas) se inicie antes que `app2` (el visualizador de bromas e imágenes).\n   - Esto evita errores de sincronización.\n\n2. **Volumen compartido (`data`):**\n   - Ambos contenedores comparten el volumen `data` para leer y escribir las bromas.\n   - Con docker compose, este volumen se configura fácilmente en el archivo YAML.\n\n3. **Gestión de Variables de Entorno:**\n   - Cada app recibe la URL de su respectiva API (`Chuck Norris` para `app1` y `Rick and Morty` para `app2`) a través de variables de entorno.\n\n4. **Facilidad para probar y reiniciar:**\n   - Si algo falla, puedes detener y reiniciar todo con:\n     ```bash\n     docker-compose down\n     docker-compose up\n     ```\n\n5. **Compatibilidad de puertos:**\n   - `app2` expone su contenido en el puerto 8081 para acceder al sitio web.\n\n---\n\n### **Resumiendo...**\n\nUsar Docker Compose con **`app1`** y **`app2`** nos permite:\n\n1. Ejecutar ambas aplicaciones juntas con un solo comando.\n2. Compartir datos entre los contenedores de manera eficiente.\n3. Asegurar que `app2` no intente funcionar hasta que `app1` haya comenzado a generar datos.\n4. Hacer nuestro entorno más fácil de manejar y reproducir.\n\nDocker compose no solo simplifica el trabajo, sino que también muestra el poder de la orquestación y la modularidad en proyectos Docker. 🚀\n\n<a href=\"07-variable-volumenes.qmd\" class=\"btn btn-primary\">Anterior</a>\n<a href=\"termino.qmd\" class=\"btn btn-primary\">Siguiente</a>","srcMarkdownNoYaml":"\n\n### **¿Qué es docker compose y para qué sirve?**\n\nDocker Compose es una herramienta que nos permite definir y manejar múltiples contenedores Docker como una única aplicación. En lugar de correr cada contenedor manualmente con comandos largos, puedes configurar todos tus servicios (contenedores) en un solo archivo YAML (`docker-compose.yml`) y ejecutarlos juntos con un solo comando.\n\n---\n\n### **Beneficios de Usar Docker Compose**\n\n1. **Simplicidad y organización:**\n   - Todos los servicios están definidos en un único archivo.\n   - Fácil de leer y entender, especialmente en proyectos con varios contenedores.\n\n2. **Automatización:**\n   - Puedes iniciar, detener y reiniciar todos los servicios con un solo comando.\n   - Define relaciones entre los servicios, como cuál debe iniciarse primero.\n\n3. **Consistencia:**\n   - Todos los miembros del equipo utilizan la misma configuración.\n   - No necesitas recordar largos comandos `docker run`.\n\n4. **Compartir recursos:**\n   - Los contenedores pueden compartir volúmenes y redes, facilitando la comunicación y el intercambio de datos.\n\n---\n\n### **¿Por qué usar docker compose con nuestras apps?**\n\nEn nuestro caso, tenemos dos aplicaciones, `app1` y `app2`, que trabajan juntas:\n\n1. **`app1`:**\n   - Genera bromas de Chuck Norris usando una API y las guarda en un archivo `jokes.txt`.\n   - Este archivo se guarda en un volumen compartido (`data`).\n\n2. **`app2`:**\n   - Lee las bromas de `jokes.txt` y las combina con imágenes de personajes de Rick and Morty.\n   - Muestra todo esto en un sitio web estilo Bootstrap.\n\nDocker Compose simplifica la forma en que estas dos aplicaciones trabajan juntas. Veamos por qué:\n\n---\n\n### Creando el docker-compose\n\nEn el mismo directorio docker-tutorial que utilizamos la lección anterior, debes crear el archivo llamada `docker-compose.yml`\nAsegurate que quede en el mismo nivel que están `app1`, `app2`, y `data`\n\n```bash\ndocker-tutorial/\n├── app1/               \n│   ├── app.py\n│   ├── requirements.txt\n│   ├── Dockerfile\n|── data/\n├── app2/               \n│   ├── app.py\n│   ├── requirements.txt\n│   ├── Dockerfile\n│   ├── static/\n│       ├── style.css\n├── docker-compose.yml\n```\n\n### Configurando el docker-compose\n\nAbre con el editor el archivo `docker-compose.yml`, copia la configuración que está a continuación y pegala en el archivo:\n\n```yml\nservices:\n  app1:\n    image: chuck_norris_generator\n    build:\n      context: ./app1\n    environment:\n      - API_URL=https://api.chucknorris.io/jokes/random\n    volumes:\n      - ./data:/app/data  # Monta la carpeta 'data' del host en '/app/data' en el contenedor\n    restart: always\n\n  app2:\n    image: chuck_norris_web\n    build:\n      context: ./app2\n    environment:\n      - API_URL=https://rickandmortyapi.com/api/character\n    ports:\n      - \"8081:5000\"\n    volumes:\n      - ./data:/app/data  # Monta la carpeta 'data' del host en '/app/data' en el contenedor\n    depends_on:\n      - app1  # Asegura que 'app1' se inicie antes de 'app2'\n    restart: always\n```\n\n### Corramos junto a docker-compose\n\nAbre una terminal y dirigete a docker-tutorial, y ejecuta el comando `docker-compose up --build`\n\n```bash\ncd docker-turorial\ndocker-compose up --build\n```\n\nSi toda va bien deberías ver como se están iniciando los contenedores con las dos apps.\n\n![compose](./assets/images/compose.png)\n\nSi abres docker desktop deberías tener un contenedor llamado `docker-tutorial`y si le das click deberías ver la orquestación de los dos contenedores\n\n![desktop](./assets/images/desktop.png)\n\nAhora si ingresas al localhost:8081 en tu navegador deberías ver la app funcionando.\n\n![navegador compose](./assets/images/navegador%20compose.png)\n\n### **Beneficios específicos para este proyecto**\n\n1. **Orquestación de `app1` y `app2`:**\n   - Con `depends_on`, nos aseguramos de que `app1` (el generador de bromas) se inicie antes que `app2` (el visualizador de bromas e imágenes).\n   - Esto evita errores de sincronización.\n\n2. **Volumen compartido (`data`):**\n   - Ambos contenedores comparten el volumen `data` para leer y escribir las bromas.\n   - Con docker compose, este volumen se configura fácilmente en el archivo YAML.\n\n3. **Gestión de Variables de Entorno:**\n   - Cada app recibe la URL de su respectiva API (`Chuck Norris` para `app1` y `Rick and Morty` para `app2`) a través de variables de entorno.\n\n4. **Facilidad para probar y reiniciar:**\n   - Si algo falla, puedes detener y reiniciar todo con:\n     ```bash\n     docker-compose down\n     docker-compose up\n     ```\n\n5. **Compatibilidad de puertos:**\n   - `app2` expone su contenido en el puerto 8081 para acceder al sitio web.\n\n---\n\n### **Resumiendo...**\n\nUsar Docker Compose con **`app1`** y **`app2`** nos permite:\n\n1. Ejecutar ambas aplicaciones juntas con un solo comando.\n2. Compartir datos entre los contenedores de manera eficiente.\n3. Asegurar que `app2` no intente funcionar hasta que `app1` haya comenzado a generar datos.\n4. Hacer nuestro entorno más fácil de manejar y reproducir.\n\nDocker compose no solo simplifica el trabajo, sino que también muestra el poder de la orquestación y la modularidad en proyectos Docker. 🚀\n\n<a href=\"07-variable-volumenes.qmd\" class=\"btn btn-primary\">Anterior</a>\n<a href=\"termino.qmd\" class=\"btn btn-primary\">Siguiente</a>"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../custom-light.scss"],"toc":true,"highlight-style":"github","output-file":"08-dockercompose.html"},"language":{"toc-title-document":"Tabla de contenidos","toc-title-website":"En esta página","related-formats-title":"Otros formatos","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Fuente","other-links-title":"Otros Enlaces","code-links-title":"Enlaces de código","launch-dev-container-title":"Iniciar Dev Container","launch-binder-title":"Iniciar Binder","article-notebook-label":"Cuaderno de Artículo","notebook-preview-download":"Descargar Cuaderno","notebook-preview-download-src":"Descargar código fuente","notebook-preview-back":"Volver al Artículo","manuscript-meca-bundle":"Archivo MECA","section-title-abstract":"Resumen","section-title-appendices":"Apéndices","section-title-footnotes":"Notas","section-title-references":"Referencias","section-title-reuse":"Reutilización","section-title-copyright":"Derechos de autor","section-title-citation":"Cómo citar","appendix-attribution-cite-as":"Por favor, cita este trabajo como:","appendix-attribution-bibtex":"BibTeX","appendix-view-license":"Ver Licencia","title-block-author-single":"Autor/a","title-block-author-plural":"Autores/as","title-block-affiliation-single":"Afiliación","title-block-affiliation-plural":"Afiliaciones","title-block-published":"Fecha de publicación","title-block-modified":"Fecha de modificación","title-block-keywords":"Palabras clave","callout-tip-title":"Tip","callout-note-title":"Nota","callout-warning-title":"Advertencia","callout-important-title":"Importante","callout-caution-title":"Precaución","code-summary":"Código","code-tools-menu-caption":"Código","code-tools-show-all-code":"Mostrar todo el código","code-tools-hide-all-code":"Ocultar todo el código","code-tools-view-source":"Ver el código fuente","code-tools-source-code":"Ejecutar el código","tools-share":"Compartir","tools-download":"Descargar","code-line":"Línea","code-lines":"Líneas","copy-button-tooltip":"Copiar al portapapeles","copy-button-tooltip-success":"Copiado","repo-action-links-edit":"Editar esta página","repo-action-links-source":"Ver el código","repo-action-links-issue":"Informar de un problema","back-to-top":"Volver arriba","search-no-results-text":"Sin resultados","search-matching-documents-text":"documentos encontrados","search-copy-link-title":"Copiar el enlace en la búsqueda","search-hide-matches-text":"Ocultar resultados adicionales","search-more-match-text":"resultado adicional en este documento","search-more-matches-text":"resultados adicionales en este documento","search-clear-button-title":"Borrar","search-text-placeholder":"","search-detached-cancel-button-title":"Cancelar","search-submit-button-title":"Enviar","search-label":"Buscar","toggle-section":"Alternar sección","toggle-sidebar":"Alternar barra lateral","toggle-dark-mode":"Alternar modo oscuro","toggle-reader-mode":"Alternar modo lector","toggle-navigation":"Navegación de palanca","crossref-fig-title":"Figura","crossref-tbl-title":"Tabla","crossref-lst-title":"Listado","crossref-thm-title":"Teorema","crossref-lem-title":"Lema","crossref-cor-title":"Corolario","crossref-prp-title":"Proposición","crossref-cnj-title":"Conjetura","crossref-def-title":"Definición","crossref-exm-title":"Ejemplo","crossref-exr-title":"Ejercicio","crossref-ch-prefix":"Capítulo","crossref-apx-prefix":"Apéndice","crossref-sec-prefix":"Sección","crossref-eq-prefix":"Ecuación","crossref-lof-title":"Listado de Figuras","crossref-lot-title":"Listado de Tablas","crossref-lol-title":"Listado de Listados","environment-proof-title":"Prueba","environment-remark-title":"Observación","environment-solution-title":"Solución","listing-page-order-by":"Ordenar por","listing-page-order-by-default":"Por defecto","listing-page-order-by-date-asc":"Menos reciente","listing-page-order-by-date-desc":"Más reciente","listing-page-order-by-number-desc":"De mayor a menor","listing-page-order-by-number-asc":"De menor a mayor","listing-page-field-date":"Fecha","listing-page-field-title":"Título","listing-page-field-description":"Descripción","listing-page-field-author":"Autor/a","listing-page-field-filename":"Nombre de archivo","listing-page-field-filemodified":"Fecha de modificación","listing-page-field-subtitle":"Subtítulo","listing-page-field-readingtime":"Tiempo de lectura","listing-page-field-wordcount":"Conteo de Palabras","listing-page-field-categories":"Categorías","listing-page-minutes-compact":"{0} minutos","listing-page-category-all":"Todas","listing-page-no-matches":"No hay resultados","listing-page-words":"{0} palabras","listing-page-filter":"Filtro","draft":"Borrador"},"metadata":{"lang":"es","fig-responsive":true,"quarto-version":"1.6.42","theme":"sketchy","fontsize":"1.2em","linestretch":1.7,"code-summary":"Mostrar código","title":"8. Docker Compose 🐙","page-navigation":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}