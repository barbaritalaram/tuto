{"title":"7. Variables de Entorno y Vol√∫menes","markdown":{"yaml":{"title":"7. Variables de Entorno y Vol√∫menes ","lang":"es","format":{"html":{"page-navigation":true,"code-fold":true}}},"headingText":"**Crear nuestra primera App contenerizada**","containsRefs":false,"markdown":"\n\n\n\n\nLlego el momento de crear nuestra primera app que corra en un contenedor.\n\n## **docker-tutorial** üóÇÔ∏è\n\n1. Crea la carpeta **docker-tutorial**\n2. Ingresa a **docker-tutorial** y crea en una carpeta que se llame **app1** y otra llamada **data**\n3. Abrela **docker-tutorial** en tu editor de c√≥digo, yo lo hago en VS Code\n4. Una vez en el editor, dentro de **app1** crea el archivo ```app.py```\n5. Crea dentro de app1 un archivo txt llamado ```requirements```\n6. Crea dentro de app1 una carpeta archivo llamado ```Dockerfile```\n\nTu carpeta docker-tutorial se debe ver as√≠\n\n```bash\ndocker-tutorial/\n‚îú‚îÄ‚îÄ app1/               \n‚îÇ   ‚îú‚îÄ‚îÄ app.py\n‚îÇ   ‚îú‚îÄ‚îÄ requirements.txt\n‚îÇ   ‚îú‚îÄ‚îÄ Dockerfile\n|‚îÄ‚îÄ data/\n```\n\n\n## **app1**\n**Desarrollemos app1**\n\n### **app.py**\nSigamos, ahora abre en el ```app.py``` y copia el c√≥digo que est√° a continuaci√≥n\n\n```python\nimport os\nimport requests\nimport time\n\n# Leer la URL de la API desde la variable de entorno\napi_url = os.getenv('API_URL')\n\n# Ruta al archivo para guardar las bromas\ndata_dir = '/app/data'\ndata_file = os.path.join(data_dir, 'jokes.txt')\n\n# Crear el directorio si no existe\nif not os.path.exists(data_dir):\n    os.makedirs(data_dir)\n\n# Verificar si el archivo existe, si no, lo creamos autom√°ticamente\nif not os.path.exists(data_file):\n    open(data_file, 'w').close()  # Esto crea el archivo vac√≠o si no existe\n\n# Funci√≥n para hacer la solicitud y guardar la broma\ndef fetch_and_save_joke():\n    response = requests.get(api_url)\n    if response.status_code == 200:\n        joke = response.json().get('value', 'No joke found.')\n        print(f\"Broma obtenida: {joke}\")\n\n        # Guardar la broma en el archivo (modo append)\n        with open(data_file, 'a') as file:\n            file.write(joke + '\\n')\n        print(f\"Broma guardada en {data_file}\")\n    else:\n        print(f\"Error al obtener la broma: {response.status_code}\")\n\n# Ejecutar la solicitud cada 1 minuto\nprint(\"Iniciando solicitudes a la API...\")\nwhile True:\n    fetch_and_save_joke()\n    print(\"Esperando 1 minuto para la pr√≥xima solicitud...\")\n    time.sleep(60)\n```\n\nEl c√≥digo anterior es sencillo, realiza una **petici√≥n a la API de don Chuck Norris** cada un minuto y **guarda** una de sus memorables **frases** en un **archivo txt** que queda en la **carpeta data**. \n\n\n### **requirements.txt**\n\nAbre el archivo requirements y dentro copia y pega lo siguiente:\n\n```bash\nrequests\n```\n¬°No olvides guardar!\n\nEl requirements.txt contiene las dependencias que se utilizar√°n, en este caso requests para hacer las peticiones a la API de don Chuck.\n\n\n\n### **Dockerfile**\n\nAhora abre el archivo ```Dockerfile```` y pega lo que est√° aqu√≠ abajo:\n\n```Dockerfile\n# Usa la imagen base oficial de Python 3.9 en su versi√≥n ligera (slim) para minimizar el tama√±o de la imagen\nFROM python:3.9-slim\n\n# Crea los directorios necesarios dentro del contenedor: \n# - /app para almacenar el c√≥digo de la aplicaci√≥n\n# - /app/data para guardar los datos generados por la aplicaci√≥n (en este caso, bromas)\nRUN mkdir /app /app/data\n\n# Establece el directorio de trabajo dentro del contenedor como /app\n# Todas las operaciones posteriores se realizar√°n desde este directorio\nWORKDIR /app\n\n# Copia el archivo principal del script (app.py) al directorio /app dentro del contenedor\nCOPY app.py /app/\n\n# Copia el archivo de dependencias (requirements.txt) al directorio /app dentro del contenedor\nCOPY requirements.txt /app/\n\n# Instala las dependencias de Python definidas en requirements.txt\nRUN pip install -r requirements.txt\n\n# Define el comando predeterminado que se ejecutar√° cuando el contenedor arranque\nCMD [\"python\", \"app.py\"]\n```\n\nLee con atenci√≥n el ```Dockerfile``` para entender que se hace en cada paso:\n\n1. ```FROM python:3.9-slim```: \nEspecifica la imagen base. En este caso, usa una imagen ligera de Python 3.9 para reducir el tama√±o del contenedor.\n\n2. ```RUN mkdir /app /app/data```:\nCrea los directorios necesarios:\n/app: Contendr√° los archivos de la aplicaci√≥n.\n/app/data: Usado para almacenar datos generados por la aplicaci√≥n.\n\n3. ```WORKDIR /app```:\nCambia el directorio de trabajo dentro del contenedor a /app. Cualquier comando posterior asumir√° que est√° en este directorio.\n\n4. ```COPY app.py /app/```:\nCopia el archivo app.py desde tu m√°quina al contenedor, ubic√°ndolo en el directorio /app.\n\n5. ```COPY requirements.txt /app/```:\nCopia el archivo requirements.txt (que lista las dependencias de Python) desde tu m√°quina al contenedor.\n\n6. ```RUN pip install -r requirements.txt```:\nInstala las bibliotecas de Python especificadas en requirements.txt. Esto asegura que todas las dependencias necesarias est√©n disponibles en el contenedor.\n\n7. ```CMD [\"python\", \"app.py\"]```:\nDefine el comando predeterminado para ejecutar cuando el contenedor se inicie. En este caso, ejecuta app.py usando Python.\n\n\n### **Vamoh a probarlo**\n\nPrimero recuerda tener Docker Desktop en ejecuci√≥n.\n\nAhora abre una terminal y navega hasta la carpeta donde est√° el ```Dockerfile``` que ser√≠a algo as√≠:\n\n```bash\ncd docker-tutorial\ncd app1\n```\n\nAhora construiremos la imagen, en el mismo terminal ejecuta este comando:\n\n```bash\ndocker build -t chuck_norris_generator -f Dockerfile .\n```\n\nSi todo va bien deber√≠as ver el proceso de creaci√≥n de la imagen de la app1\n\n![app1build](./assets/images/buildapp1.png)\n\nAhora haremos correr a ese container! Copia y pega las siguientes instrucciones en tu terminal:\n\n**Para macOS**:\n```bash\ndocker run -it \\\n  --name chuck_norris_generator \\\n  -e API_URL=https://api.chucknorris.io/jokes/random \\\n  -v \"$(pwd)/../data:/app/data\" \\\n  chuck_norris_generator\n````\n\n**Para Windows (PowerShell)**\n```bash\ndocker run -it `\n  --name chuck_norris_generator `\n  -e API_URL=https://api.chucknorris.io/jokes/random `\n  -v ${PWD}/../data:/app/data `\n  chuck_norris_generator\n```\n\nSi todo va bien, deber√≠as ver los logs de tu contenedor en la terminal y al abrir el jokes.txt deber√≠a estar el primer chiste de don Chuck.\n\n![runcontainer](./assets/images/runapp1.png)\n\n\n### **Qu√© hicimos con este comando**\n\n¬°Vamos a desmenuzar este comando para entenderlo paso a paso! Aqu√≠ estamos ejecutando un contenedor de Docker que genera bromas de don Chuck Norris, le asignamos un nombre, le pasamos una variable de entorno para configurar la API y conectamos un volumen para guardar las bromas.\n\n\n\n### **Explicaci√≥n del comando**\n\n```powershell\ndocker run -it `\n  --name chuck_norris_generator `\n  -e API_URL=https://api.chucknorris.io/jokes/random `\n  -v ${PWD}/../data:/app/data `\n  chuck_norris_generator\n```\n\n#### **1. `docker run`**\nEsto le dice a Docker que queremos ejecutar un contenedor basado en una imagen (en este caso, `app1`).\n\n#### **2. `-it`**\nEsto significa que el contenedor se ejecutar√° de manera interactiva y mostrar√° la salida directamente en nuestra terminal. B√°sicamente, estamos \"entrando\" al contenedor.\n\n#### **3. `--name chuck_norris_generator`**\nAqu√≠ le damos un nombre al contenedor: **`chuck_norris_generator`**. Esto es √∫til porque en lugar de lidiar con un CONTAINER ID largo generado por Docker, ahora podemos referirnos a este contenedor por su nombre. Por ejemplo, si queremos detenerlo, podemos usar:\n```bash\ndocker stop chuck_norris_generator\n```\n\n#### **4. `-e API_URL=https://api.chucknorris.io/jokes/random`**\n**¬°Esta es la clave para personalizar el contenedor!**  \nCon `-e`, le pasamos una **variable de entorno** llamada `API_URL`. Esto le dice al contenedor qu√© API debe usar para obtener las bromas. En este caso, apuntamos a la API de Chuck Norris.\n\n**¬øPor qu√© usar una variable de entorno?**\n- Porque hace que el c√≥digo sea m√°s flexible. Si alguna vez necesitas cambiar la URL de la API, no tendr√°s que modificar el c√≥digo del contenedor. Solo cambias la variable de entorno al ejecutarlo.\n\n#### **5. `-v ${PWD}/../data:/app/data`**\n**Aqu√≠ est√° el truco para guardar datos entre ejecuciones.**  \nCon `-v`, estamos creando un **volumen**. En t√©rminos simples, esto conecta un directorio de tu m√°quina (`${PWD}/../data`) con un directorio dentro del contenedor (`/app/data`).\n\n¬øQu√© significa esto?  \n1. **`${PWD}/../data`:**  \n   - Este es el directorio en tu m√°quina donde se guardar√°n las bromas.  \n   - `${PWD}` obtiene el directorio actual (en este caso, donde est√°s ejecutando el comando), y `../data` sube un nivel para buscar la carpeta `data`.\n\n2. **`/app/data`:**  \n   - Es el directorio dentro del contenedor donde se escriben las bromas.\n\n3. **Resultado:**  \n   Las bromas generadas por el contenedor se guardan en tu m√°quina local en `../data/jokes.txt`. Esto significa que si detienes o eliminas el contenedor, ¬°las bromas seguir√°n ah√≠! üòÇ\n\n#### **6. `app1`**\nPor √∫ltimo, este es el nombre de la imagen Docker que queremos ejecutar.\n\n\n\n### **Qu√© logramos**\n- **Usamos una variable de entorno (`API_URL`)** para configurar la API desde donde se obtienen las bromas, sin modificar el c√≥digo del contenedor.\n- **Montamos un volumen (`-v`)** para que los datos generados por el contenedor (las bromas) se guarden en nuestra m√°quina. Esto asegura que las bromas persistan incluso si el contenedor se detiene o elimina.\n\n\n### **¬øPor qu√© Importa?**\n1. **Flexibilidad con `-e`:**  \n   Las variables de entorno hacen que el contenedor sea reutilizable en diferentes escenarios. Por ejemplo, puedes usar otra API solo cambiando la URL que pasas a `API_URL`.\n\n2. **Persistencia con `-v`:**  \n   Los vol√∫menes permiten que los datos sobrevivan al ciclo de vida del contenedor. Esto es fundamental para aplicaciones que generan o consumen datos.\n\nAhora vamos con la segunda app\n\n\n## **app2**\n\nSigue los pasos que est√°n a continuaci√≥n\n\n1. En la **docker-tutorial** crea un directorio que se llame **app2**, abre esta carpeta en tu editor\n2. En **app2** crea la carpeta **static**, luego ingresa a ella y crea el archivo ```style.css```\n3. Ahora te devuelves un nivel y en **app2** crea el archivo ```app.py```\n4. Crea dentro de app2 un archivo txt llamado ```requirements```\n5. Crea dentro de app2 una carpeta archivo llamado ```Dockerfile```\n\nTu carpeta docker-tutorial se debe ver as√≠\n\n```bash\ndocker-tutorial/\n‚îú‚îÄ‚îÄ app1/               \n‚îÇ   ‚îú‚îÄ‚îÄ app.py\n‚îÇ   ‚îú‚îÄ‚îÄ requirements.txt\n‚îÇ   ‚îú‚îÄ‚îÄ Dockerfile\n|‚îÄ‚îÄ data/\n‚îú‚îÄ‚îÄ app2/               \n‚îÇ   ‚îú‚îÄ‚îÄ app.py\n‚îÇ   ‚îú‚îÄ‚îÄ requirements.txt\n‚îÇ   ‚îú‚îÄ‚îÄ Dockerfile\n‚îÇ   ‚îú‚îÄ‚îÄ static/\n‚îÇ       ‚îú‚îÄ‚îÄstyle.css\n```\n\n### **app.py**\nSigamos, ahora abre en el ```app.py``` y copia el c√≥digo que est√° a continuaci√≥n\n\n```python\nfrom flask import Flask, render_template_string\nimport os\nimport requests\n\napp = Flask(__name__)\n\n# Rutas al archivo de bromas\ndata_file = '/app/data/jokes.txt'\n\n# URL de la API de Rick and Morty\n\nrick_and_morty_api = os.getenv('API_URL')\n\n@app.route('/')\ndef show_jokes_and_images():\n    # Leer las bromas desde el archivo\n    if os.path.exists(data_file):\n        with open(data_file, 'r') as file:\n            jokes = file.read().splitlines()\n    else:\n        jokes = [\"No hay bromas disponibles a√∫n.\"]\n\n    # Obtener un personaje aleatorio de Rick and Morty\n    response = requests.get(rick_and_morty_api)\n    if response.status_code == 200:\n        characters = response.json()['results']\n        images = [char['image'] for char in characters]\n    else:\n        images = [\"/static/default.jpg\"]  # Imagen por defecto si falla la API\n\n    # Combinar bromas con im√°genes aleatorias\n    cards = [{\"joke\": joke, \"image\": images[i % len(images)]} for i, joke in enumerate(jokes)]\n\n    # Renderizar HTML\n    html = \"\"\"\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Chuck Norris Jokes</title>\n        <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css\">\n        <link rel=\"stylesheet\" href=\"/static/style.css\">\n        <script>\n            setInterval(function() {\n                location.reload();\n            }, 60000); // Recargar cada 60 segundos\n        </script>\n    </head>\n    <body>\n        <div class=\"container mt-4\">\n            <h1 class=\"text-center mb-4\">Chuck Norris Jokes + Rick and Morty</h1>\n            <div class=\"row\">\n                {% for card in cards %}\n                <div class=\"col-md-6 mb-3\">\n                    <div class=\"card\">\n                        <div class=\"row g-0\">\n                            <div class=\"col-md-4\">\n                                <img src=\"{{ card.image }}\" class=\"img-fluid rounded-start\" alt=\"Character\">\n                            </div>\n                            <div class=\"col-md-8\">\n                                <div class=\"card-body\">\n                                    <p class=\"card-text\">{{ card.joke }}</p>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                {% endfor %}\n            </div>\n        </div>\n    </body>\n    </html>\n    \"\"\"\n    return render_template_string(html, cards=cards)\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)\n\n```\n\nEste c√≥digo crea una aplicaci√≥n web con Flask que combina bromas de Chuck Norris con im√°genes de personajes de **Rick and Morty**. \n\n1. **Lee las bromas** de un archivo (`jokes.txt`), si no existe, muestra un mensaje por defecto.\n2. **Obtiene personajes** de Rick and Morty desde una API y extrae sus im√°genes. Si la API falla, usa una imagen por defecto.\n3. **Combina bromas e im√°genes** en tarjetas (`cards`) usando un dise√±o horizontal estilo Bootstrap.\n4. **Renderiza un HTML din√°mico** que muestra las tarjetas, actualizando la p√°gina autom√°ticamente cada 60 segundos para reflejar cambios en las bromas.\n\n- En /static/ agrega cualquier imagen que tengas con el nombre default.jpg, de esta forma si falla la API de Rick and Morty se ver√° una imagen en las tarjetas.\n\n\n### **requirements.txt**\n\nAbre el archivo requirements y dentro copia y pega lo siguiente:\n\n```bash\nflask\nrequests\n```\n¬°No olvides guardar!\n\nEl requirements.txt contiene las dependencias que se utilizar√°n, en este caso requests para crear la aplicaci√≥n web y requests para las peticiones al API de Ricky and Morty\n\n\n### **style.css**\n\nIngresa a la carpeta **static** y abre el archivo `style.css` y pega ah√≠ las lineas de c√≥digo que est√°n a continuaci√≥n:\n\n```css\nbody {\n    font-family: Arial, sans-serif;\n    background-color: #f4f4f4;\n    margin: 0;\n    padding: 0;\n}\n\nh1 {\n    color: #007bff;\n}\n\n.card {\n    border: 1px solid #ddd;\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    border-radius: 10px;\n    overflow: hidden;\n}\n\n.card img {\n    max-height: 150px;\n    object-fit: cover;\n}\n\n.card-text {\n    font-size: 1rem;\n    line-height: 1.5;\n}\n\n```\n\n### **Dockerfile**\n\nAhora abre el archivo `Dockerfile` y pega lo que est√° aqu√≠ abajo:\n\n```Dockerfile\n# Usa una imagen base ligera de Python 3.9\nFROM python:3.9-slim\n\n# Crea los directorios necesarios dentro del contenedor: \n# - /app para almacenar el c√≥digo de la aplicaci√≥n\n# - /app/data para guardar los datos generados por la aplicaci√≥n (en este caso, bromas)\n\nRUN mkdir /app /app/data\n# Establece el directorio de trabajo dentro del contenedor\nWORKDIR /app\n\n# Copia el archivo de requisitos\nCOPY requirements.txt /app/\n\n# Instala las dependencias\nRUN pip install -r requirements.txt\n\n# Copia el c√≥digo de la aplicaci√≥n al contenedor\nCOPY . /app/\n\n# Expone el puerto 5000 para Flask\nEXPOSE 5000\n\n# Comando predeterminado para ejecutar la aplicaci√≥n\nCMD [\"python\", \"app.py\"]\n```\n\n### **Vamoh a probarlo**\n\nPrimero recuerda tener Docker Desktop en ejecuci√≥n.\n\nAhora abre una terminal y navega hasta la carpeta donde est√° el ```Dockerfile``` que ser√≠a algo as√≠:\n\n```bash\ncd docker-tutorial\ncd app2\n```\n\nAhora construiremos la imagen, en el mismo terminal ejecuta este comando:\n\n```bash\ndocker build -t chuck_norris_web -f Dockerfile .\n```\nDeberias ver algo como lo que est√° en la imagen\n![dockerapp2 build](./img/docker_app2_build.png)\n\nAhora haremos correr a ese container! Copia y pega las siguientes instrucciones en tu terminal:\n\n**Para macOS**:\n```bash\ndocker run -it \\\n  --name chuck_norris_web \\\n  -e API_URL=https://rickandmortyapi.com/api/character \\\n  -p 8081:5000 \\\n  -v \"$(pwd)/../data:/app/data\" \\\n  chuck_norris_web\n````\n\n**Para Windows (PowerShell)**:\n```bash\ndocker run -it `\n  --name chuck_norris_web `\n  - e API_URL=https://rickandmortyapi.com/api/character `\n  -p 8081:5000 `\n  -v ${PWD}/../data:/app/data `\n  chuck_norris_web\n```\n\nSi todo va bien, deber√≠as ver algo como esto en la terminal:\n\n![run app2](./assets/images/runapp2.png)\n\nY en el navegador ingresa al localhost:8081 y deber√≠as ver algo como esto:\n\n![navegador](./assets/images/navegador.png)\n\nY listo, la **app2** esta funcionando üéâüéâ ahora tienes dos aplicaciones contenerizadas que comparten un volumen y utilizan variables de entorno, en este caso consultan a dos APIS distintas. ¬øVez el potencial de los contenedores? No tuviste que instalar ninguna dependencia de python, no tuviste que descargar python, este c√≥digo nunca lo ejecutaste en tu VS Code, solo se ejecuto en un ambiente aislado con sus propias dependencias, osea en un contenedor.\nLa app1 se trae las frases y la app2 las muestra junto con una imagen en el navegador.\n\nTe dejo como deber√≠a estar tu estructura de carpetas\n![estructura](./assets/images/estructura.png)\n\n<a href=\"06-excalidraw.qmd\" class=\"btn btn-primary\">Anterior</a>\n<a href=\"08-dockercompose.qmd\" class=\"btn btn-primary\">Siguiente</a>","srcMarkdownNoYaml":"\n\n\n# \n\n## **Crear nuestra primera App contenerizada**\n\nLlego el momento de crear nuestra primera app que corra en un contenedor.\n\n## **docker-tutorial** üóÇÔ∏è\n\n1. Crea la carpeta **docker-tutorial**\n2. Ingresa a **docker-tutorial** y crea en una carpeta que se llame **app1** y otra llamada **data**\n3. Abrela **docker-tutorial** en tu editor de c√≥digo, yo lo hago en VS Code\n4. Una vez en el editor, dentro de **app1** crea el archivo ```app.py```\n5. Crea dentro de app1 un archivo txt llamado ```requirements```\n6. Crea dentro de app1 una carpeta archivo llamado ```Dockerfile```\n\nTu carpeta docker-tutorial se debe ver as√≠\n\n```bash\ndocker-tutorial/\n‚îú‚îÄ‚îÄ app1/               \n‚îÇ   ‚îú‚îÄ‚îÄ app.py\n‚îÇ   ‚îú‚îÄ‚îÄ requirements.txt\n‚îÇ   ‚îú‚îÄ‚îÄ Dockerfile\n|‚îÄ‚îÄ data/\n```\n\n\n## **app1**\n**Desarrollemos app1**\n\n### **app.py**\nSigamos, ahora abre en el ```app.py``` y copia el c√≥digo que est√° a continuaci√≥n\n\n```python\nimport os\nimport requests\nimport time\n\n# Leer la URL de la API desde la variable de entorno\napi_url = os.getenv('API_URL')\n\n# Ruta al archivo para guardar las bromas\ndata_dir = '/app/data'\ndata_file = os.path.join(data_dir, 'jokes.txt')\n\n# Crear el directorio si no existe\nif not os.path.exists(data_dir):\n    os.makedirs(data_dir)\n\n# Verificar si el archivo existe, si no, lo creamos autom√°ticamente\nif not os.path.exists(data_file):\n    open(data_file, 'w').close()  # Esto crea el archivo vac√≠o si no existe\n\n# Funci√≥n para hacer la solicitud y guardar la broma\ndef fetch_and_save_joke():\n    response = requests.get(api_url)\n    if response.status_code == 200:\n        joke = response.json().get('value', 'No joke found.')\n        print(f\"Broma obtenida: {joke}\")\n\n        # Guardar la broma en el archivo (modo append)\n        with open(data_file, 'a') as file:\n            file.write(joke + '\\n')\n        print(f\"Broma guardada en {data_file}\")\n    else:\n        print(f\"Error al obtener la broma: {response.status_code}\")\n\n# Ejecutar la solicitud cada 1 minuto\nprint(\"Iniciando solicitudes a la API...\")\nwhile True:\n    fetch_and_save_joke()\n    print(\"Esperando 1 minuto para la pr√≥xima solicitud...\")\n    time.sleep(60)\n```\n\nEl c√≥digo anterior es sencillo, realiza una **petici√≥n a la API de don Chuck Norris** cada un minuto y **guarda** una de sus memorables **frases** en un **archivo txt** que queda en la **carpeta data**. \n\n\n### **requirements.txt**\n\nAbre el archivo requirements y dentro copia y pega lo siguiente:\n\n```bash\nrequests\n```\n¬°No olvides guardar!\n\nEl requirements.txt contiene las dependencias que se utilizar√°n, en este caso requests para hacer las peticiones a la API de don Chuck.\n\n\n\n### **Dockerfile**\n\nAhora abre el archivo ```Dockerfile```` y pega lo que est√° aqu√≠ abajo:\n\n```Dockerfile\n# Usa la imagen base oficial de Python 3.9 en su versi√≥n ligera (slim) para minimizar el tama√±o de la imagen\nFROM python:3.9-slim\n\n# Crea los directorios necesarios dentro del contenedor: \n# - /app para almacenar el c√≥digo de la aplicaci√≥n\n# - /app/data para guardar los datos generados por la aplicaci√≥n (en este caso, bromas)\nRUN mkdir /app /app/data\n\n# Establece el directorio de trabajo dentro del contenedor como /app\n# Todas las operaciones posteriores se realizar√°n desde este directorio\nWORKDIR /app\n\n# Copia el archivo principal del script (app.py) al directorio /app dentro del contenedor\nCOPY app.py /app/\n\n# Copia el archivo de dependencias (requirements.txt) al directorio /app dentro del contenedor\nCOPY requirements.txt /app/\n\n# Instala las dependencias de Python definidas en requirements.txt\nRUN pip install -r requirements.txt\n\n# Define el comando predeterminado que se ejecutar√° cuando el contenedor arranque\nCMD [\"python\", \"app.py\"]\n```\n\nLee con atenci√≥n el ```Dockerfile``` para entender que se hace en cada paso:\n\n1. ```FROM python:3.9-slim```: \nEspecifica la imagen base. En este caso, usa una imagen ligera de Python 3.9 para reducir el tama√±o del contenedor.\n\n2. ```RUN mkdir /app /app/data```:\nCrea los directorios necesarios:\n/app: Contendr√° los archivos de la aplicaci√≥n.\n/app/data: Usado para almacenar datos generados por la aplicaci√≥n.\n\n3. ```WORKDIR /app```:\nCambia el directorio de trabajo dentro del contenedor a /app. Cualquier comando posterior asumir√° que est√° en este directorio.\n\n4. ```COPY app.py /app/```:\nCopia el archivo app.py desde tu m√°quina al contenedor, ubic√°ndolo en el directorio /app.\n\n5. ```COPY requirements.txt /app/```:\nCopia el archivo requirements.txt (que lista las dependencias de Python) desde tu m√°quina al contenedor.\n\n6. ```RUN pip install -r requirements.txt```:\nInstala las bibliotecas de Python especificadas en requirements.txt. Esto asegura que todas las dependencias necesarias est√©n disponibles en el contenedor.\n\n7. ```CMD [\"python\", \"app.py\"]```:\nDefine el comando predeterminado para ejecutar cuando el contenedor se inicie. En este caso, ejecuta app.py usando Python.\n\n\n### **Vamoh a probarlo**\n\nPrimero recuerda tener Docker Desktop en ejecuci√≥n.\n\nAhora abre una terminal y navega hasta la carpeta donde est√° el ```Dockerfile``` que ser√≠a algo as√≠:\n\n```bash\ncd docker-tutorial\ncd app1\n```\n\nAhora construiremos la imagen, en el mismo terminal ejecuta este comando:\n\n```bash\ndocker build -t chuck_norris_generator -f Dockerfile .\n```\n\nSi todo va bien deber√≠as ver el proceso de creaci√≥n de la imagen de la app1\n\n![app1build](./assets/images/buildapp1.png)\n\nAhora haremos correr a ese container! Copia y pega las siguientes instrucciones en tu terminal:\n\n**Para macOS**:\n```bash\ndocker run -it \\\n  --name chuck_norris_generator \\\n  -e API_URL=https://api.chucknorris.io/jokes/random \\\n  -v \"$(pwd)/../data:/app/data\" \\\n  chuck_norris_generator\n````\n\n**Para Windows (PowerShell)**\n```bash\ndocker run -it `\n  --name chuck_norris_generator `\n  -e API_URL=https://api.chucknorris.io/jokes/random `\n  -v ${PWD}/../data:/app/data `\n  chuck_norris_generator\n```\n\nSi todo va bien, deber√≠as ver los logs de tu contenedor en la terminal y al abrir el jokes.txt deber√≠a estar el primer chiste de don Chuck.\n\n![runcontainer](./assets/images/runapp1.png)\n\n\n### **Qu√© hicimos con este comando**\n\n¬°Vamos a desmenuzar este comando para entenderlo paso a paso! Aqu√≠ estamos ejecutando un contenedor de Docker que genera bromas de don Chuck Norris, le asignamos un nombre, le pasamos una variable de entorno para configurar la API y conectamos un volumen para guardar las bromas.\n\n\n\n### **Explicaci√≥n del comando**\n\n```powershell\ndocker run -it `\n  --name chuck_norris_generator `\n  -e API_URL=https://api.chucknorris.io/jokes/random `\n  -v ${PWD}/../data:/app/data `\n  chuck_norris_generator\n```\n\n#### **1. `docker run`**\nEsto le dice a Docker que queremos ejecutar un contenedor basado en una imagen (en este caso, `app1`).\n\n#### **2. `-it`**\nEsto significa que el contenedor se ejecutar√° de manera interactiva y mostrar√° la salida directamente en nuestra terminal. B√°sicamente, estamos \"entrando\" al contenedor.\n\n#### **3. `--name chuck_norris_generator`**\nAqu√≠ le damos un nombre al contenedor: **`chuck_norris_generator`**. Esto es √∫til porque en lugar de lidiar con un CONTAINER ID largo generado por Docker, ahora podemos referirnos a este contenedor por su nombre. Por ejemplo, si queremos detenerlo, podemos usar:\n```bash\ndocker stop chuck_norris_generator\n```\n\n#### **4. `-e API_URL=https://api.chucknorris.io/jokes/random`**\n**¬°Esta es la clave para personalizar el contenedor!**  \nCon `-e`, le pasamos una **variable de entorno** llamada `API_URL`. Esto le dice al contenedor qu√© API debe usar para obtener las bromas. En este caso, apuntamos a la API de Chuck Norris.\n\n**¬øPor qu√© usar una variable de entorno?**\n- Porque hace que el c√≥digo sea m√°s flexible. Si alguna vez necesitas cambiar la URL de la API, no tendr√°s que modificar el c√≥digo del contenedor. Solo cambias la variable de entorno al ejecutarlo.\n\n#### **5. `-v ${PWD}/../data:/app/data`**\n**Aqu√≠ est√° el truco para guardar datos entre ejecuciones.**  \nCon `-v`, estamos creando un **volumen**. En t√©rminos simples, esto conecta un directorio de tu m√°quina (`${PWD}/../data`) con un directorio dentro del contenedor (`/app/data`).\n\n¬øQu√© significa esto?  \n1. **`${PWD}/../data`:**  \n   - Este es el directorio en tu m√°quina donde se guardar√°n las bromas.  \n   - `${PWD}` obtiene el directorio actual (en este caso, donde est√°s ejecutando el comando), y `../data` sube un nivel para buscar la carpeta `data`.\n\n2. **`/app/data`:**  \n   - Es el directorio dentro del contenedor donde se escriben las bromas.\n\n3. **Resultado:**  \n   Las bromas generadas por el contenedor se guardan en tu m√°quina local en `../data/jokes.txt`. Esto significa que si detienes o eliminas el contenedor, ¬°las bromas seguir√°n ah√≠! üòÇ\n\n#### **6. `app1`**\nPor √∫ltimo, este es el nombre de la imagen Docker que queremos ejecutar.\n\n\n\n### **Qu√© logramos**\n- **Usamos una variable de entorno (`API_URL`)** para configurar la API desde donde se obtienen las bromas, sin modificar el c√≥digo del contenedor.\n- **Montamos un volumen (`-v`)** para que los datos generados por el contenedor (las bromas) se guarden en nuestra m√°quina. Esto asegura que las bromas persistan incluso si el contenedor se detiene o elimina.\n\n\n### **¬øPor qu√© Importa?**\n1. **Flexibilidad con `-e`:**  \n   Las variables de entorno hacen que el contenedor sea reutilizable en diferentes escenarios. Por ejemplo, puedes usar otra API solo cambiando la URL que pasas a `API_URL`.\n\n2. **Persistencia con `-v`:**  \n   Los vol√∫menes permiten que los datos sobrevivan al ciclo de vida del contenedor. Esto es fundamental para aplicaciones que generan o consumen datos.\n\nAhora vamos con la segunda app\n\n\n## **app2**\n\nSigue los pasos que est√°n a continuaci√≥n\n\n1. En la **docker-tutorial** crea un directorio que se llame **app2**, abre esta carpeta en tu editor\n2. En **app2** crea la carpeta **static**, luego ingresa a ella y crea el archivo ```style.css```\n3. Ahora te devuelves un nivel y en **app2** crea el archivo ```app.py```\n4. Crea dentro de app2 un archivo txt llamado ```requirements```\n5. Crea dentro de app2 una carpeta archivo llamado ```Dockerfile```\n\nTu carpeta docker-tutorial se debe ver as√≠\n\n```bash\ndocker-tutorial/\n‚îú‚îÄ‚îÄ app1/               \n‚îÇ   ‚îú‚îÄ‚îÄ app.py\n‚îÇ   ‚îú‚îÄ‚îÄ requirements.txt\n‚îÇ   ‚îú‚îÄ‚îÄ Dockerfile\n|‚îÄ‚îÄ data/\n‚îú‚îÄ‚îÄ app2/               \n‚îÇ   ‚îú‚îÄ‚îÄ app.py\n‚îÇ   ‚îú‚îÄ‚îÄ requirements.txt\n‚îÇ   ‚îú‚îÄ‚îÄ Dockerfile\n‚îÇ   ‚îú‚îÄ‚îÄ static/\n‚îÇ       ‚îú‚îÄ‚îÄstyle.css\n```\n\n### **app.py**\nSigamos, ahora abre en el ```app.py``` y copia el c√≥digo que est√° a continuaci√≥n\n\n```python\nfrom flask import Flask, render_template_string\nimport os\nimport requests\n\napp = Flask(__name__)\n\n# Rutas al archivo de bromas\ndata_file = '/app/data/jokes.txt'\n\n# URL de la API de Rick and Morty\n\nrick_and_morty_api = os.getenv('API_URL')\n\n@app.route('/')\ndef show_jokes_and_images():\n    # Leer las bromas desde el archivo\n    if os.path.exists(data_file):\n        with open(data_file, 'r') as file:\n            jokes = file.read().splitlines()\n    else:\n        jokes = [\"No hay bromas disponibles a√∫n.\"]\n\n    # Obtener un personaje aleatorio de Rick and Morty\n    response = requests.get(rick_and_morty_api)\n    if response.status_code == 200:\n        characters = response.json()['results']\n        images = [char['image'] for char in characters]\n    else:\n        images = [\"/static/default.jpg\"]  # Imagen por defecto si falla la API\n\n    # Combinar bromas con im√°genes aleatorias\n    cards = [{\"joke\": joke, \"image\": images[i % len(images)]} for i, joke in enumerate(jokes)]\n\n    # Renderizar HTML\n    html = \"\"\"\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Chuck Norris Jokes</title>\n        <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css\">\n        <link rel=\"stylesheet\" href=\"/static/style.css\">\n        <script>\n            setInterval(function() {\n                location.reload();\n            }, 60000); // Recargar cada 60 segundos\n        </script>\n    </head>\n    <body>\n        <div class=\"container mt-4\">\n            <h1 class=\"text-center mb-4\">Chuck Norris Jokes + Rick and Morty</h1>\n            <div class=\"row\">\n                {% for card in cards %}\n                <div class=\"col-md-6 mb-3\">\n                    <div class=\"card\">\n                        <div class=\"row g-0\">\n                            <div class=\"col-md-4\">\n                                <img src=\"{{ card.image }}\" class=\"img-fluid rounded-start\" alt=\"Character\">\n                            </div>\n                            <div class=\"col-md-8\">\n                                <div class=\"card-body\">\n                                    <p class=\"card-text\">{{ card.joke }}</p>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                {% endfor %}\n            </div>\n        </div>\n    </body>\n    </html>\n    \"\"\"\n    return render_template_string(html, cards=cards)\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)\n\n```\n\nEste c√≥digo crea una aplicaci√≥n web con Flask que combina bromas de Chuck Norris con im√°genes de personajes de **Rick and Morty**. \n\n1. **Lee las bromas** de un archivo (`jokes.txt`), si no existe, muestra un mensaje por defecto.\n2. **Obtiene personajes** de Rick and Morty desde una API y extrae sus im√°genes. Si la API falla, usa una imagen por defecto.\n3. **Combina bromas e im√°genes** en tarjetas (`cards`) usando un dise√±o horizontal estilo Bootstrap.\n4. **Renderiza un HTML din√°mico** que muestra las tarjetas, actualizando la p√°gina autom√°ticamente cada 60 segundos para reflejar cambios en las bromas.\n\n- En /static/ agrega cualquier imagen que tengas con el nombre default.jpg, de esta forma si falla la API de Rick and Morty se ver√° una imagen en las tarjetas.\n\n\n### **requirements.txt**\n\nAbre el archivo requirements y dentro copia y pega lo siguiente:\n\n```bash\nflask\nrequests\n```\n¬°No olvides guardar!\n\nEl requirements.txt contiene las dependencias que se utilizar√°n, en este caso requests para crear la aplicaci√≥n web y requests para las peticiones al API de Ricky and Morty\n\n\n### **style.css**\n\nIngresa a la carpeta **static** y abre el archivo `style.css` y pega ah√≠ las lineas de c√≥digo que est√°n a continuaci√≥n:\n\n```css\nbody {\n    font-family: Arial, sans-serif;\n    background-color: #f4f4f4;\n    margin: 0;\n    padding: 0;\n}\n\nh1 {\n    color: #007bff;\n}\n\n.card {\n    border: 1px solid #ddd;\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    border-radius: 10px;\n    overflow: hidden;\n}\n\n.card img {\n    max-height: 150px;\n    object-fit: cover;\n}\n\n.card-text {\n    font-size: 1rem;\n    line-height: 1.5;\n}\n\n```\n\n### **Dockerfile**\n\nAhora abre el archivo `Dockerfile` y pega lo que est√° aqu√≠ abajo:\n\n```Dockerfile\n# Usa una imagen base ligera de Python 3.9\nFROM python:3.9-slim\n\n# Crea los directorios necesarios dentro del contenedor: \n# - /app para almacenar el c√≥digo de la aplicaci√≥n\n# - /app/data para guardar los datos generados por la aplicaci√≥n (en este caso, bromas)\n\nRUN mkdir /app /app/data\n# Establece el directorio de trabajo dentro del contenedor\nWORKDIR /app\n\n# Copia el archivo de requisitos\nCOPY requirements.txt /app/\n\n# Instala las dependencias\nRUN pip install -r requirements.txt\n\n# Copia el c√≥digo de la aplicaci√≥n al contenedor\nCOPY . /app/\n\n# Expone el puerto 5000 para Flask\nEXPOSE 5000\n\n# Comando predeterminado para ejecutar la aplicaci√≥n\nCMD [\"python\", \"app.py\"]\n```\n\n### **Vamoh a probarlo**\n\nPrimero recuerda tener Docker Desktop en ejecuci√≥n.\n\nAhora abre una terminal y navega hasta la carpeta donde est√° el ```Dockerfile``` que ser√≠a algo as√≠:\n\n```bash\ncd docker-tutorial\ncd app2\n```\n\nAhora construiremos la imagen, en el mismo terminal ejecuta este comando:\n\n```bash\ndocker build -t chuck_norris_web -f Dockerfile .\n```\nDeberias ver algo como lo que est√° en la imagen\n![dockerapp2 build](./img/docker_app2_build.png)\n\nAhora haremos correr a ese container! Copia y pega las siguientes instrucciones en tu terminal:\n\n**Para macOS**:\n```bash\ndocker run -it \\\n  --name chuck_norris_web \\\n  -e API_URL=https://rickandmortyapi.com/api/character \\\n  -p 8081:5000 \\\n  -v \"$(pwd)/../data:/app/data\" \\\n  chuck_norris_web\n````\n\n**Para Windows (PowerShell)**:\n```bash\ndocker run -it `\n  --name chuck_norris_web `\n  - e API_URL=https://rickandmortyapi.com/api/character `\n  -p 8081:5000 `\n  -v ${PWD}/../data:/app/data `\n  chuck_norris_web\n```\n\nSi todo va bien, deber√≠as ver algo como esto en la terminal:\n\n![run app2](./assets/images/runapp2.png)\n\nY en el navegador ingresa al localhost:8081 y deber√≠as ver algo como esto:\n\n![navegador](./assets/images/navegador.png)\n\nY listo, la **app2** esta funcionando üéâüéâ ahora tienes dos aplicaciones contenerizadas que comparten un volumen y utilizan variables de entorno, en este caso consultan a dos APIS distintas. ¬øVez el potencial de los contenedores? No tuviste que instalar ninguna dependencia de python, no tuviste que descargar python, este c√≥digo nunca lo ejecutaste en tu VS Code, solo se ejecuto en un ambiente aislado con sus propias dependencias, osea en un contenedor.\nLa app1 se trae las frases y la app2 las muestra junto con una imagen en el navegador.\n\nTe dejo como deber√≠a estar tu estructura de carpetas\n![estructura](./assets/images/estructura.png)\n\n<a href=\"06-excalidraw.qmd\" class=\"btn btn-primary\">Anterior</a>\n<a href=\"08-dockercompose.qmd\" class=\"btn btn-primary\">Siguiente</a>"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../custom-light.scss"],"toc":true,"highlight-style":"github","output-file":"07-variables-volumenes.html"},"language":{"toc-title-document":"Tabla de contenidos","toc-title-website":"En esta p√°gina","related-formats-title":"Otros formatos","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Fuente","other-links-title":"Otros Enlaces","code-links-title":"Enlaces de c√≥digo","launch-dev-container-title":"Iniciar Dev Container","launch-binder-title":"Iniciar Binder","article-notebook-label":"Cuaderno de Art√≠culo","notebook-preview-download":"Descargar Cuaderno","notebook-preview-download-src":"Descargar c√≥digo fuente","notebook-preview-back":"Volver al Art√≠culo","manuscript-meca-bundle":"Archivo MECA","section-title-abstract":"Resumen","section-title-appendices":"Ap√©ndices","section-title-footnotes":"Notas","section-title-references":"Referencias","section-title-reuse":"Reutilizaci√≥n","section-title-copyright":"Derechos de autor","section-title-citation":"C√≥mo citar","appendix-attribution-cite-as":"Por favor, cita este trabajo como:","appendix-attribution-bibtex":"BibTeX","appendix-view-license":"Ver Licencia","title-block-author-single":"Autor/a","title-block-author-plural":"Autores/as","title-block-affiliation-single":"Afiliaci√≥n","title-block-affiliation-plural":"Afiliaciones","title-block-published":"Fecha de publicaci√≥n","title-block-modified":"Fecha de modificaci√≥n","title-block-keywords":"Palabras clave","callout-tip-title":"Tip","callout-note-title":"Nota","callout-warning-title":"Advertencia","callout-important-title":"Importante","callout-caution-title":"Precauci√≥n","code-summary":"C√≥digo","code-tools-menu-caption":"C√≥digo","code-tools-show-all-code":"Mostrar todo el c√≥digo","code-tools-hide-all-code":"Ocultar todo el c√≥digo","code-tools-view-source":"Ver el c√≥digo fuente","code-tools-source-code":"Ejecutar el c√≥digo","tools-share":"Compartir","tools-download":"Descargar","code-line":"L√≠nea","code-lines":"L√≠neas","copy-button-tooltip":"Copiar al portapapeles","copy-button-tooltip-success":"Copiado","repo-action-links-edit":"Editar esta p√°gina","repo-action-links-source":"Ver el c√≥digo","repo-action-links-issue":"Informar de un problema","back-to-top":"Volver arriba","search-no-results-text":"Sin resultados","search-matching-documents-text":"documentos encontrados","search-copy-link-title":"Copiar el enlace en la b√∫squeda","search-hide-matches-text":"Ocultar resultados adicionales","search-more-match-text":"resultado adicional en este documento","search-more-matches-text":"resultados adicionales en este documento","search-clear-button-title":"Borrar","search-text-placeholder":"","search-detached-cancel-button-title":"Cancelar","search-submit-button-title":"Enviar","search-label":"Buscar","toggle-section":"Alternar secci√≥n","toggle-sidebar":"Alternar barra lateral","toggle-dark-mode":"Alternar modo oscuro","toggle-reader-mode":"Alternar modo lector","toggle-navigation":"Navegaci√≥n de palanca","crossref-fig-title":"Figura","crossref-tbl-title":"Tabla","crossref-lst-title":"Listado","crossref-thm-title":"Teorema","crossref-lem-title":"Lema","crossref-cor-title":"Corolario","crossref-prp-title":"Proposici√≥n","crossref-cnj-title":"Conjetura","crossref-def-title":"Definici√≥n","crossref-exm-title":"Ejemplo","crossref-exr-title":"Ejercicio","crossref-ch-prefix":"Cap√≠tulo","crossref-apx-prefix":"Ap√©ndice","crossref-sec-prefix":"Secci√≥n","crossref-eq-prefix":"Ecuaci√≥n","crossref-lof-title":"Listado de Figuras","crossref-lot-title":"Listado de Tablas","crossref-lol-title":"Listado de Listados","environment-proof-title":"Prueba","environment-remark-title":"Observaci√≥n","environment-solution-title":"Soluci√≥n","listing-page-order-by":"Ordenar por","listing-page-order-by-default":"Por defecto","listing-page-order-by-date-asc":"Menos reciente","listing-page-order-by-date-desc":"M√°s reciente","listing-page-order-by-number-desc":"De mayor a menor","listing-page-order-by-number-asc":"De menor a mayor","listing-page-field-date":"Fecha","listing-page-field-title":"T√≠tulo","listing-page-field-description":"Descripci√≥n","listing-page-field-author":"Autor/a","listing-page-field-filename":"Nombre de archivo","listing-page-field-filemodified":"Fecha de modificaci√≥n","listing-page-field-subtitle":"Subt√≠tulo","listing-page-field-readingtime":"Tiempo de lectura","listing-page-field-wordcount":"Conteo de Palabras","listing-page-field-categories":"Categor√≠as","listing-page-minutes-compact":"{0} minutos","listing-page-category-all":"Todas","listing-page-no-matches":"No hay resultados","listing-page-words":"{0} palabras","listing-page-filter":"Filtro","draft":"Borrador"},"metadata":{"lang":"es","fig-responsive":true,"quarto-version":"1.6.42","theme":"sketchy","fontsize":"1.2em","linestretch":1.7,"code-summary":"Mostrar c√≥digo","title":"7. Variables de Entorno y Vol√∫menes ","page-navigation":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}