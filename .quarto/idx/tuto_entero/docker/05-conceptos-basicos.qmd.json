{"title":"5. Los Conceptos B√°sicos de los Contenedores üëÄ","markdown":{"yaml":{"title":"5. Los Conceptos B√°sicos de los Contenedores üëÄ","lang":"es","format":{"html":{"page-navigation":true,"code-fold":true}}},"headingText":"Conceptos b√°sicos de Docker","containsRefs":false,"markdown":"\n\n\nPara entender c√≥mo funciona Docker y aprovechar sus capacidades, es importante familiarizarse con algunos conceptos clave. A continuaci√≥n, explicaremos los elementos esenciales que componen esta tecnolog√≠a.\n\n### Contenedor\n\nUn contenedor es una instancia en ejecuci√≥n de una imagen. Es como una c√°psula autosuficiente dise√±ada para ejecutar una aplicaci√≥n de manera predecible y uniforme, sin importar el entorno donde se encuentre. Siguiendo con la analog√≠a del traje espacial üë©‚ÄçüöÄ, el contenedor encapsula la aplicaci√≥n junto con todas sus dependencias en un entorno aislado.\n\nEn t√©rminos t√©cnicos, un contenedor es un proceso que se ejecuta en este entorno aislado. Los contenedores tienen un comando principal que los controla, definido mediante las instrucciones CMD o ENTRYPOINT en el Dockerfile. Esto significa que un contenedor puede:\n\n* Ejecutar una tarea espec√≠fica y finalizar, como procesar un archivo o ejecutar un script.\n* Mantenerse en ejecuci√≥n indefinidamente, por ejemplo, para ejecutar un servidor web.\n\nEs importante destacar que los contenedores no son permanentes. Si un contenedor se elimina, **la imagen de la cual fue creado permanece intacta**, lo que permite iniciar otro contenedor id√©ntico en cualquier momento.\n\n### Imagen\nUna imagen es como el plano o la receta de un contenedor. Es un archivo inmutable que contiene todo lo necesario para ejecutar una aplicaci√≥n: desde el sistema de archivos hasta las configuraciones necesarias.\n\nLas im√°genes se crean a partir de un **Dockerfile**, que act√∫a como una plantilla para construirlas. Este archivo define:\n\n* La aplicaci√≥n que se desea ejecutar.\n* Las librer√≠as del lenguaje necesarias para su funcionamiento (como Python, Node.js o Java).\n* Las librer√≠as del sistema operativo requeridas.\n* Configuraciones espec√≠ficas, como los comandos de arranque (CMD o ENTRYPOINT), puertos que se deben exponer y directorios de trabajo.\n\nUna vez construida la imagen, esta puede ser reutilizada para crear m√∫ltiples contenedores, lo que garantiza consistencia en los entornos de desarrollo, pruebas y producci√≥n.\n\n\n### Dockerfile\n\nEl ```Dockerfile``` es un archivo que act√∫a como una receta para construir im√°genes en Docker. Contiene un conjunto de instrucciones secuenciales que le indican a Docker c√≥mo preparar un entorno, desde instalar dependencias hasta copiar archivos o configurar variables de entorno.\n\nEs una herramienta poderosa porque permite codificar todo el proceso de configuraci√≥n del entorno como texto, asegurando que pueda ser replicado f√°cilmente en cualquier momento y en cualquier lugar.\n\n**Estructura b√°sica de un Dockerfile**\n\nLos **Dockerfile** suelen comenzar con una instrucci√≥n ```FROM```, que define la imagen base que se utilizar√°. A partir de ah√≠, se agregan las instrucciones necesarias para personalizar esa imagen base seg√∫n las necesidades de la aplicaci√≥n. Entre las instrucciones m√°s comunes se encuentran:\n\n* ```RUN```: Ejecuta comandos para instalar dependencias o realizar configuraciones.\n* ```COPY``` o ```ADD```: Copian archivos desde el host al contenedor.\n* ```ENV```: Define variables de entorno.\n* ```CMD``` o ```ENTRYPOINT```: Especifican el comando que se ejecutar√° al iniciar el contenedor.\n\n**Ejemplo pr√°ctico**\n\nSupongamos que queremos construir una imagen que sirva una p√°gina web con un servidor Apache. Este ser√≠a el Dockerfile correspondiente:\n\n```dockerfile\n# Usamos Ubuntu 22.04 como base\nFROM ubuntu:22.04  \n\n# Actualizamos paquetes e instalamos Apache\nRUN apt-get update && apt-get install -y apache2  \n\n# Copiamos el archivo de nuestra web est√°tica al directorio de Apache\nCOPY index.html /var/www/html/  \n\n# Arrancamos el servidor Apache en primer plano\nCMD [\"apache2ctl\", \"-D\", \"FOREGROUND\"]\n```\n\n**Desglose del ejemplo**\n\n1. ```FROM ubuntu:22.04```\nDefine que la imagen base ser√° Ubuntu 22.04. Esta es la base sobre la que construiremos todo lo dem√°s.\n\n\n2. ```RUN apt-get update && apt-get install -y apache2```\nActualizamos los paquetes de la distribuci√≥n e instalamos Apache con sus dependencias. Este comando equivale a escribir estas instrucciones en un terminal de Ubuntu.\n\n\n3. ```COPY index.html /var/www/html/```\n Copiamos un archivo local llamado index.html al directorio donde Apache sirve los archivos web.\n\n\n4. ```CMD [\"apache2ctl\", \"-D\", \"FOREGROUND\"]```\n Definimos el comando que se ejecutar√° cuando el contenedor arranque: iniciar el servidor Apache en modo primer plano (FOREGROUND).\n\n\n**Ventajas del Dockerfile**\n\n* Replicabilidad: Todo el proceso est√° codificado, lo que asegura que cualquiera pueda generar la misma imagen siguiendo el mismo Dockerfile.\n* Portabilidad: Puedes construir la misma imagen en cualquier sistema que soporte Docker.\n* Automatizaci√≥n: Permite automatizar la configuraci√≥n de entornos, reduciendo errores humanos.\n\nEn resumen, un Dockerfile es como escribir los pasos que seguir√≠amos manualmente en un sistema operativo, pero los documentamos como c√≥digo para que puedan ser ejecutados autom√°ticamente por Docker. Esto no solo facilita el trabajo en equipo, sino que tambi√©n garantiza entornos consistentes. üöÄ\n\n### Docker Hub\n\n**Docker Hub** es como el **mercado central de Docker**, donde se almacenan y comparten im√°genes de contenedores. Es un repositorio en l√≠nea donde puedes encontrar im√°genes oficiales creadas por empresas como Python, Nginx o PostgreSQL, adem√°s de im√°genes comunitarias para m√∫ltiples prop√≥sitos.\nSi necesitas una base para tus proyectos, como un contenedor con Node.js o una base de datos MySQL, Docker Hub ser√° tu mejor aliado. Tambi√©n puedes subir tus propias im√°genes para compartirlas con tu equipo o con la comunidad. Solo necesitas una cuenta para empezar a usar este recurso.\n\n\nAhora que conoces qu√© son los contenedores, im√°genes, Dockerfile y Docker Hub, puedes entender c√≥mo estos elementos trabajan juntos para construir entornos de desarrollo eficientes, portables y escalables. üöÄ\n\n<a href=\"04-primer-container.qmd\" class=\"btn btn-primary\">Anterior</a>\n<a href=\"06-excalidraw.qmd\" class=\"btn btn-primary\">Siguiente</a>","srcMarkdownNoYaml":"\n\n## Conceptos b√°sicos de Docker\n\nPara entender c√≥mo funciona Docker y aprovechar sus capacidades, es importante familiarizarse con algunos conceptos clave. A continuaci√≥n, explicaremos los elementos esenciales que componen esta tecnolog√≠a.\n\n### Contenedor\n\nUn contenedor es una instancia en ejecuci√≥n de una imagen. Es como una c√°psula autosuficiente dise√±ada para ejecutar una aplicaci√≥n de manera predecible y uniforme, sin importar el entorno donde se encuentre. Siguiendo con la analog√≠a del traje espacial üë©‚ÄçüöÄ, el contenedor encapsula la aplicaci√≥n junto con todas sus dependencias en un entorno aislado.\n\nEn t√©rminos t√©cnicos, un contenedor es un proceso que se ejecuta en este entorno aislado. Los contenedores tienen un comando principal que los controla, definido mediante las instrucciones CMD o ENTRYPOINT en el Dockerfile. Esto significa que un contenedor puede:\n\n* Ejecutar una tarea espec√≠fica y finalizar, como procesar un archivo o ejecutar un script.\n* Mantenerse en ejecuci√≥n indefinidamente, por ejemplo, para ejecutar un servidor web.\n\nEs importante destacar que los contenedores no son permanentes. Si un contenedor se elimina, **la imagen de la cual fue creado permanece intacta**, lo que permite iniciar otro contenedor id√©ntico en cualquier momento.\n\n### Imagen\nUna imagen es como el plano o la receta de un contenedor. Es un archivo inmutable que contiene todo lo necesario para ejecutar una aplicaci√≥n: desde el sistema de archivos hasta las configuraciones necesarias.\n\nLas im√°genes se crean a partir de un **Dockerfile**, que act√∫a como una plantilla para construirlas. Este archivo define:\n\n* La aplicaci√≥n que se desea ejecutar.\n* Las librer√≠as del lenguaje necesarias para su funcionamiento (como Python, Node.js o Java).\n* Las librer√≠as del sistema operativo requeridas.\n* Configuraciones espec√≠ficas, como los comandos de arranque (CMD o ENTRYPOINT), puertos que se deben exponer y directorios de trabajo.\n\nUna vez construida la imagen, esta puede ser reutilizada para crear m√∫ltiples contenedores, lo que garantiza consistencia en los entornos de desarrollo, pruebas y producci√≥n.\n\n\n### Dockerfile\n\nEl ```Dockerfile``` es un archivo que act√∫a como una receta para construir im√°genes en Docker. Contiene un conjunto de instrucciones secuenciales que le indican a Docker c√≥mo preparar un entorno, desde instalar dependencias hasta copiar archivos o configurar variables de entorno.\n\nEs una herramienta poderosa porque permite codificar todo el proceso de configuraci√≥n del entorno como texto, asegurando que pueda ser replicado f√°cilmente en cualquier momento y en cualquier lugar.\n\n**Estructura b√°sica de un Dockerfile**\n\nLos **Dockerfile** suelen comenzar con una instrucci√≥n ```FROM```, que define la imagen base que se utilizar√°. A partir de ah√≠, se agregan las instrucciones necesarias para personalizar esa imagen base seg√∫n las necesidades de la aplicaci√≥n. Entre las instrucciones m√°s comunes se encuentran:\n\n* ```RUN```: Ejecuta comandos para instalar dependencias o realizar configuraciones.\n* ```COPY``` o ```ADD```: Copian archivos desde el host al contenedor.\n* ```ENV```: Define variables de entorno.\n* ```CMD``` o ```ENTRYPOINT```: Especifican el comando que se ejecutar√° al iniciar el contenedor.\n\n**Ejemplo pr√°ctico**\n\nSupongamos que queremos construir una imagen que sirva una p√°gina web con un servidor Apache. Este ser√≠a el Dockerfile correspondiente:\n\n```dockerfile\n# Usamos Ubuntu 22.04 como base\nFROM ubuntu:22.04  \n\n# Actualizamos paquetes e instalamos Apache\nRUN apt-get update && apt-get install -y apache2  \n\n# Copiamos el archivo de nuestra web est√°tica al directorio de Apache\nCOPY index.html /var/www/html/  \n\n# Arrancamos el servidor Apache en primer plano\nCMD [\"apache2ctl\", \"-D\", \"FOREGROUND\"]\n```\n\n**Desglose del ejemplo**\n\n1. ```FROM ubuntu:22.04```\nDefine que la imagen base ser√° Ubuntu 22.04. Esta es la base sobre la que construiremos todo lo dem√°s.\n\n\n2. ```RUN apt-get update && apt-get install -y apache2```\nActualizamos los paquetes de la distribuci√≥n e instalamos Apache con sus dependencias. Este comando equivale a escribir estas instrucciones en un terminal de Ubuntu.\n\n\n3. ```COPY index.html /var/www/html/```\n Copiamos un archivo local llamado index.html al directorio donde Apache sirve los archivos web.\n\n\n4. ```CMD [\"apache2ctl\", \"-D\", \"FOREGROUND\"]```\n Definimos el comando que se ejecutar√° cuando el contenedor arranque: iniciar el servidor Apache en modo primer plano (FOREGROUND).\n\n\n**Ventajas del Dockerfile**\n\n* Replicabilidad: Todo el proceso est√° codificado, lo que asegura que cualquiera pueda generar la misma imagen siguiendo el mismo Dockerfile.\n* Portabilidad: Puedes construir la misma imagen en cualquier sistema que soporte Docker.\n* Automatizaci√≥n: Permite automatizar la configuraci√≥n de entornos, reduciendo errores humanos.\n\nEn resumen, un Dockerfile es como escribir los pasos que seguir√≠amos manualmente en un sistema operativo, pero los documentamos como c√≥digo para que puedan ser ejecutados autom√°ticamente por Docker. Esto no solo facilita el trabajo en equipo, sino que tambi√©n garantiza entornos consistentes. üöÄ\n\n### Docker Hub\n\n**Docker Hub** es como el **mercado central de Docker**, donde se almacenan y comparten im√°genes de contenedores. Es un repositorio en l√≠nea donde puedes encontrar im√°genes oficiales creadas por empresas como Python, Nginx o PostgreSQL, adem√°s de im√°genes comunitarias para m√∫ltiples prop√≥sitos.\nSi necesitas una base para tus proyectos, como un contenedor con Node.js o una base de datos MySQL, Docker Hub ser√° tu mejor aliado. Tambi√©n puedes subir tus propias im√°genes para compartirlas con tu equipo o con la comunidad. Solo necesitas una cuenta para empezar a usar este recurso.\n\n\nAhora que conoces qu√© son los contenedores, im√°genes, Dockerfile y Docker Hub, puedes entender c√≥mo estos elementos trabajan juntos para construir entornos de desarrollo eficientes, portables y escalables. üöÄ\n\n<a href=\"04-primer-container.qmd\" class=\"btn btn-primary\">Anterior</a>\n<a href=\"06-excalidraw.qmd\" class=\"btn btn-primary\">Siguiente</a>"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../custom-light.scss"],"toc":true,"highlight-style":"github","output-file":"05-conceptos-basicos.html"},"language":{"toc-title-document":"Tabla de contenidos","toc-title-website":"En esta p√°gina","related-formats-title":"Otros formatos","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Fuente","other-links-title":"Otros Enlaces","code-links-title":"Enlaces de c√≥digo","launch-dev-container-title":"Iniciar Dev Container","launch-binder-title":"Iniciar Binder","article-notebook-label":"Cuaderno de Art√≠culo","notebook-preview-download":"Descargar Cuaderno","notebook-preview-download-src":"Descargar c√≥digo fuente","notebook-preview-back":"Volver al Art√≠culo","manuscript-meca-bundle":"Archivo MECA","section-title-abstract":"Resumen","section-title-appendices":"Ap√©ndices","section-title-footnotes":"Notas","section-title-references":"Referencias","section-title-reuse":"Reutilizaci√≥n","section-title-copyright":"Derechos de autor","section-title-citation":"C√≥mo citar","appendix-attribution-cite-as":"Por favor, cita este trabajo como:","appendix-attribution-bibtex":"BibTeX","appendix-view-license":"Ver Licencia","title-block-author-single":"Autor/a","title-block-author-plural":"Autores/as","title-block-affiliation-single":"Afiliaci√≥n","title-block-affiliation-plural":"Afiliaciones","title-block-published":"Fecha de publicaci√≥n","title-block-modified":"Fecha de modificaci√≥n","title-block-keywords":"Palabras clave","callout-tip-title":"Tip","callout-note-title":"Nota","callout-warning-title":"Advertencia","callout-important-title":"Importante","callout-caution-title":"Precauci√≥n","code-summary":"C√≥digo","code-tools-menu-caption":"C√≥digo","code-tools-show-all-code":"Mostrar todo el c√≥digo","code-tools-hide-all-code":"Ocultar todo el c√≥digo","code-tools-view-source":"Ver el c√≥digo fuente","code-tools-source-code":"Ejecutar el c√≥digo","tools-share":"Compartir","tools-download":"Descargar","code-line":"L√≠nea","code-lines":"L√≠neas","copy-button-tooltip":"Copiar al portapapeles","copy-button-tooltip-success":"Copiado","repo-action-links-edit":"Editar esta p√°gina","repo-action-links-source":"Ver el c√≥digo","repo-action-links-issue":"Informar de un problema","back-to-top":"Volver arriba","search-no-results-text":"Sin resultados","search-matching-documents-text":"documentos encontrados","search-copy-link-title":"Copiar el enlace en la b√∫squeda","search-hide-matches-text":"Ocultar resultados adicionales","search-more-match-text":"resultado adicional en este documento","search-more-matches-text":"resultados adicionales en este documento","search-clear-button-title":"Borrar","search-text-placeholder":"","search-detached-cancel-button-title":"Cancelar","search-submit-button-title":"Enviar","search-label":"Buscar","toggle-section":"Alternar secci√≥n","toggle-sidebar":"Alternar barra lateral","toggle-dark-mode":"Alternar modo oscuro","toggle-reader-mode":"Alternar modo lector","toggle-navigation":"Navegaci√≥n de palanca","crossref-fig-title":"Figura","crossref-tbl-title":"Tabla","crossref-lst-title":"Listado","crossref-thm-title":"Teorema","crossref-lem-title":"Lema","crossref-cor-title":"Corolario","crossref-prp-title":"Proposici√≥n","crossref-cnj-title":"Conjetura","crossref-def-title":"Definici√≥n","crossref-exm-title":"Ejemplo","crossref-exr-title":"Ejercicio","crossref-ch-prefix":"Cap√≠tulo","crossref-apx-prefix":"Ap√©ndice","crossref-sec-prefix":"Secci√≥n","crossref-eq-prefix":"Ecuaci√≥n","crossref-lof-title":"Listado de Figuras","crossref-lot-title":"Listado de Tablas","crossref-lol-title":"Listado de Listados","environment-proof-title":"Prueba","environment-remark-title":"Observaci√≥n","environment-solution-title":"Soluci√≥n","listing-page-order-by":"Ordenar por","listing-page-order-by-default":"Por defecto","listing-page-order-by-date-asc":"Menos reciente","listing-page-order-by-date-desc":"M√°s reciente","listing-page-order-by-number-desc":"De mayor a menor","listing-page-order-by-number-asc":"De menor a mayor","listing-page-field-date":"Fecha","listing-page-field-title":"T√≠tulo","listing-page-field-description":"Descripci√≥n","listing-page-field-author":"Autor/a","listing-page-field-filename":"Nombre de archivo","listing-page-field-filemodified":"Fecha de modificaci√≥n","listing-page-field-subtitle":"Subt√≠tulo","listing-page-field-readingtime":"Tiempo de lectura","listing-page-field-wordcount":"Conteo de Palabras","listing-page-field-categories":"Categor√≠as","listing-page-minutes-compact":"{0} minutos","listing-page-category-all":"Todas","listing-page-no-matches":"No hay resultados","listing-page-words":"{0} palabras","listing-page-filter":"Filtro","draft":"Borrador"},"metadata":{"lang":"es","fig-responsive":true,"quarto-version":"1.6.42","theme":"sketchy","fontsize":"1.2em","linestretch":1.7,"code-summary":"Mostrar c√≥digo","title":"5. Los Conceptos B√°sicos de los Contenedores üëÄ","page-navigation":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}